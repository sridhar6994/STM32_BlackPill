/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void GPIO_Init(void) {
    // Enable GPIOA clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;

    // Configure PA4 (SS) as alternate function (AF5 for SPI1)
    GPIOA->MODER &= ~(GPIO_MODER_MODE4);   // Clear mode for PA4
    GPIOA->MODER |= GPIO_MODER_MODE4_1;    // Set PA4 to alternate function mode
    GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL4);  // Clear alternate function bits for PA4
    GPIOA->AFR[0] |= (5 << GPIO_AFRL_AFSEL4_Pos); // Set AF5 for SPI1_SS

    // Configure PA5 (SCK) as alternate function (AF5 for SPI1)
    GPIOA->MODER &= ~(GPIO_MODER_MODE5);   // Clear mode for PA5
    GPIOA->MODER |= GPIO_MODER_MODE5_1;    // Set PA5 to alternate function mode
    GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL5);  // Clear alternate function bits for PA5
    GPIOA->AFR[0] |= (5 << GPIO_AFRL_AFSEL5_Pos); // Set AF5 for SPI1_SCK

    // Configure PA6 (MISO) as alternate function (AF5 for SPI1)
    GPIOA->MODER &= ~(GPIO_MODER_MODE6);   // Clear mode for PA6
    GPIOA->MODER |= GPIO_MODER_MODE6_1;    // Set PA6 to alternate function mode
    GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL6);  // Clear alternate function bits for PA6
    GPIOA->AFR[0] |= (5 << GPIO_AFRL_AFSEL6_Pos); // Set AF5 for SPI1_MISO

    // Configure PA7 (MOSI) as alternate function (AF5 for SPI1)
    GPIOA->MODER &= ~(GPIO_MODER_MODE7);   // Clear mode for PA7
    GPIOA->MODER |= GPIO_MODER_MODE7_1;    // Set PA7 to alternate function mode
    GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL7);  // Clear alternate function bits for PA7
    GPIOA->AFR[0] |= (5 << GPIO_AFRL_AFSEL7_Pos); // Set AF5 for SPI1_MOSI
}

// Function to initialize SPI1 in Mode-0
void SPI_Init(void) {
    // Enable SPI1 clock
    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;

    // Configure SPI1 in Mode-0 (CPOL = 0, CPHA = 0)
    SPI1->CR1 &= ~(SPI_CR1_MSTR);        // Set as master (default)
    SPI1->CR1 &= ~(SPI_CR1_CPOL);        // Clock polarity = 0
    SPI1->CR1 &= ~(SPI_CR1_CPHA);        // Clock phase = 0
    SPI1->CR1 &= ~(SPI_CR1_DFF);         // 8-bit data frame format
    SPI1->CR1 |= SPI_CR1_SSM;            // Software slave management (SSM = 1)
    SPI1->CR1 |= SPI_CR1_SSI;            // Internal slave select (SSI = 1)
    SPI1->CR1 |= SPI_CR1_BR_1;           // Baud rate = fPCLK / 16 (example)
    SPI1->CR1 |= SPI_CR1_MSTR;           // Master mode
    SPI1->CR1 |= SPI_CR1_SPE;            // Enable SPI1
}

// Function to send a byte via SPI1
void SPI_SendByte(uint8_t data) {
    // Wait until TXE (Transmit buffer empty) flag is set
    while (!(SPI1->SR & SPI_SR_TXE)) {}

    // Send data
    SPI1->DR = data;

    // Wait until the transmission is complete (wait for RXNE flag)
    while (!(SPI1->SR & SPI_SR_RXNE)) {}
    volatile uint8_t received_data = SPI1->DR; // Read received data to clear RXNE flag
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	 GPIO_Init();
	 SPI_Init();

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SPI_SendByte(0x55); // Send a byte, e.g., 0x55
	  for (volatile int i = 0; i < 100000; i++); // Simple delay loop
  }
  return 0;
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
